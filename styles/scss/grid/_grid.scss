// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-row($gutter: $grid-gutter-width) {
  --#{$variable-prefix}gutter-x: #{$gutter};
  --#{$variable-prefix}gutter-y: 0;
  display: flex;
  flex-wrap: wrap;

  margin-top: calc(-1 * var(--#{$variable-prefix}gutter-y)); // stylelint-disable-line function-disallowed-list
  margin-right: calc(-.5 * var(--#{$variable-prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
  margin-left: calc(-.5 * var(--#{$variable-prefix}gutter-x)); // stylelint-disable-line function-disallowed-list
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
  // Add box sizing if only the grid is loaded
  box-sizing: if(variable-exists(include-column-box-sizing) and $include-column-box-sizing, border-box, null);
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we set the width
  // later on to override this initial width.
  flex-shrink: 0;
  width: 100%;
  max-width: 100%; // Prevent `.col-auto`, `.col` (& responsive variants) from breaking out the grid
  padding-right: calc(var(--#{$variable-prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  padding-left: calc(var(--#{$variable-prefix}gutter-x) * .5); // stylelint-disable-line function-disallowed-list
  margin-top: var(--#{$variable-prefix}gutter-y);
}

@mixin make-col($size: false, $columns: $grid-columns) {
  @if $size {
    flex: 0 0 auto;
    width: percentage(divide($size, $columns));

  }

  @else {
    flex: 1 1 0;
    max-width: 100%;
  }
}

@mixin make-col-auto() {
  flex: 0 0 auto;
  width: auto;
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: divide($size, $columns);
  margin-left: if($num==0, 0, percentage($num));
}

// Row columns
//
// Specify on a parent element(e.g., .row) to force immediate children into NN
// numberof columns. Supports wrapping to new lines, but does not do a Masonry
// style grid.
@mixin row-cols($count) {
  >* {
    flex: 0 0 auto;
    width: divide(100%, $count);
  }
}

// Framework grid generation
//
// Generate the correct number of grid classes given
// any value of `$grid-columns`.

@mixin make-grid-columns($columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {

      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$infix} {
        flex: 1 0 0%; // Flexbugs #4: https://github.com/philipwalton/flexbugs#flexbug-4
      }

      .row-cols#{$infix}-auto>* {
        @include make-col-auto();
      }

      @if $grid-row-columns>0 {
        @for $i from 1 through $grid-row-columns {
          .row-cols#{$infix}-#{$i} {
            @include row-cols($i);
          }
        }
      }

      .col#{$infix}-auto {
        @include make-col-auto();
      }

      @if $columns>0 {
        @for $i from 1 through $columns {
          .col#{$infix}-#{$i} {
            @include make-col($i, $columns);
          }
        }

        // `$columns - 1` because offsetting by the width of an entire row isn't possible
        @for $i from 0 through ($columns - 1) {
          @if not ($infix==""and $i==0) {

            // Avoid emitting useless .offset-0
            .offset#{$infix}-#{$i} {
              @include make-col-offset($i, $columns);
            }
          }
        }
      }

      // Gutters
      //
      // Make use of `.g-*`, `.gx-*` or `.gy-*` utilities to change spacing between the columns.
      @each $key,
      $value in $gutters {

        .g#{$infix}-#{$key},
        .gx#{$infix}-#{$key} {
          --#{$variable-prefix}gutter-x: #{$value};
        }

        .g#{$infix}-#{$key},
        .gy#{$infix}-#{$key} {
          --#{$variable-prefix}gutter-y: #{$value};
        }
      }
    }
  }
}

@mixin make-cssgrid($columns: $grid-columns, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      @if $columns>0 {
        @for $i from 1 through $columns {
          .g-col#{$infix}-#{$i} {
            grid-column: auto / span $i;
          }
        }

        // Start with `1` because `0` is and invalid value.
        // Ends with `$columns - 1` because offsetting by the width of an entire row isn't possible.
        @for $i from 1 through ($columns - 1) {
          .g-start#{$infix}-#{$i} {
            grid-column-start: $i;
          }
        }
      }
    }
  }
}

// Container mixins

@mixin make-container($gutter: $container-padding-x) {
  width: 100%;
  padding-right: var(--#{$variable-prefix}gutter-x, #{$gutter});
  padding-left: var(--#{$variable-prefix}gutter-x, #{$gutter});
  margin-right: auto;
  margin-left: auto;
}


// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.

@if $enable-grid-classes {

  // Single container class with breakpoint max-widths
  .#{$variable-prefix}container,
  // 100% wide container at all breakpoints
  .#{$variable-prefix}container-fluid {
    @include make-container();
  }

  // Responsive containers that are 100% wide until a breakpoint
  @each $breakpoint,
  $container-max-width in $container-max-widths {
    .#{$variable-prefix}container-#{$breakpoint} {
      @extend .#{$variable-prefix}container-fluid;
    }

    @include media-breakpoint-up($breakpoint, $grid-breakpoints) {
      %responsive-container-#{$breakpoint} {
        max-width: $container-max-width;
      }

      // Extend each breakpoint which is smaller or equal to the current breakpoint
      $extend-breakpoint: true;

      @each $name,
      $width in $grid-breakpoints {
        @if ($extend-breakpoint) {
          .#{$variable-prefix}container#{breakpoint-infix($name, $grid-breakpoints)} {
            @extend %responsive-container-#{$breakpoint};
          }

          // Once the current breakpoint is reached, stop extending
          @if ($breakpoint==$name) {
            $extend-breakpoint: false;
          }
        }
      }
    }
  }
}



// Row
//
// Rows contain your columns.

@if $enable-grid-classes {
  .#{$variable-prefix}container .row {
    @include make-row();
    @include make-grid-columns();

    >* {
      @include make-col-ready();
    }
  }
}

@if $enable-cssgrid {
  .#{$variable-prefix}grid {
    display: grid;
    grid-template-rows: repeat(var(--#{$variable-prefix}rows, 1), 1fr);
    grid-template-columns: repeat(var(--#{$variable-prefix}columns, #{$grid-columns}), 1fr);
    gap: var(--#{$variable-prefix}gap, #{$grid-gutter-width});

    @include make-cssgrid();
  }
}


// Columns
//
// Common styles for small and large grid columns

// @if $enable-grid-classes {
//   @include make-grid-columns();
// }


// Custom gutters and margins for responsive grid
@media (min-width: map-get($grid-breakpoints, xs)) and (max-width: map-get($grid-breakpoints, sm)) {
  .row:not(.g-0):not(.gx-0) {
    --#{$variable-prefix}gutter-x: 1rem;
  }

  .#{$variable-prefix}container:not(.g-0):not(.gx-0) {
    --#{$variable-prefix}gutter-x: 1.5rem;
  }

  .#{$variable-prefix}grid {
    --#{$variable-prefix}rows: 1;
    --#{$variable-prefix}columns: 12;
    --#{$variable-prefix}gap: 1rem;
    margin-left: 1.5rem;
    margin-right: 1.5rem;
  }
}

@media (min-width: map-get($grid-breakpoints, sm)) and (max-width: map-get($grid-breakpoints, md)) {
  .#{$variable-prefix}container .row:not(.g-0):not(.gx-0) {
    --#{$variable-prefix}gutter-x: 1.5rem;
  }

  .#{$variable-prefix}container:not(.g-0):not(.gx-0) {
    --#{$variable-prefix}gutter-x: 1.5rem;
  }

  .#{$variable-prefix}grid {
    --#{$variable-prefix}rows: 1;
    --#{$variable-prefix}columns: 12;
    --#{$variable-prefix}gap: 1.5rem;
    margin-left: 1.5rem;
    margin-right: 1.5rem;
  }
}

@media (min-width: map-get($grid-breakpoints, md)) and (max-width: map-get($grid-breakpoints, lg)) {
  .#{$variable-prefix}container .row:not(.g-0):not(.gx-0) {
    --#{$variable-prefix}gutter-x: 1.5rem;
  }

  .#{$variable-prefix}container:not(.g-0):not(.gx-0) {
    --#{$variable-prefix}gutter-x: 2rem;
  }

  .#{$variable-prefix}grid {
    --#{$variable-prefix}rows: 1;
    --#{$variable-prefix}columns: 12;
    --#{$variable-prefix}gap: 1.5rem;
    margin-left: 2rem;
    margin-right: 2rem;
  }
}

@media (min-width: map-get($grid-breakpoints, lg)) {
  .#{$variable-prefix}container .row:not(.g-0):not(.gx-0) {
    --#{$variable-prefix}gutter-x: 2rem;
  }

  .#{$variable-prefix}container:not(.g-0):not(.gx-0) {
    --#{$variable-prefix}gutter-x: 2.5rem;
  }

  .#{$variable-prefix}grid {
    --#{$variable-prefix}rows: 1;
    --#{$variable-prefix}columns: 12;
    --#{$variable-prefix}gap: 2rem;
    margin-left: 2.5rem;
    margin-right: 2.5rem;
  }
}